//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainClass ModelRoot
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ModelRoot.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ModelRoot.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e0be5be1-3d03-4c20-8d94-df0429281519")]
	public partial class ModelRoot : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe0be5be1, 0x3d03, 0x4c20, 0x8d, 0x94, 0xdf, 0x04, 0x29, 0x28, 0x15, 0x19);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Ufba.ShHome.ModelRootHasComments.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region Types opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Types
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(global::Ufba.ShHome.ModelRootHasTypes.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region Devices opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Devices.
		/// Description for Ufba.ShHome.ModelHasDevices.ModelRoot
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Device> Devices
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Device>, Device>(global::Ufba.ShHome.ModelHasDevices.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ufba.ShHome.Comment.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ufba.ShHome.ModelType.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ufba.ShHome.Device.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Ufba.ShHome.Comment sourceComment1 = sourceElement as global::Ufba.ShHome.Comment;
			if (sourceComment1 != null)
			{
				// Create link for path ModelRootHasComments.Comments
				this.Comments.Add(sourceComment1);

				return;
			}
				
			global::Ufba.ShHome.ModelType sourceModelType2 = sourceElement as global::Ufba.ShHome.ModelType;
			if (sourceModelType2 != null)
			{
				// Create link for path ModelRootHasTypes.Types
				this.Types.Add(sourceModelType2);

				return;
			}
				
			global::Ufba.ShHome.Device sourceDevice3 = sourceElement as global::Ufba.ShHome.Device;
			if (sourceDevice3 != null)
			{
				// Create link for path ModelHasDevices.Devices
				this.Devices.Add(sourceDevice3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Ufba.ShHome.Comment sourceComment1 = sourceElement as global::Ufba.ShHome.Comment;
			if (sourceComment1 != null)
			{
				// Delete link for path ModelRootHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::Ufba.ShHome.ModelRootHasComments.GetLinks((global::Ufba.ShHome.ModelRoot)this, sourceComment1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.ShHome.ModelRootHasComments.ModelRootDomainRoleId, global::Ufba.ShHome.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
				
			global::Ufba.ShHome.ModelType sourceModelType2 = sourceElement as global::Ufba.ShHome.ModelType;
			if (sourceModelType2 != null)
			{
				// Delete link for path ModelRootHasTypes.Types
				
				foreach (DslModeling::ElementLink link in global::Ufba.ShHome.ModelRootHasTypes.GetLinks((global::Ufba.ShHome.ModelRoot)this, sourceModelType2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.ShHome.ModelRootHasTypes.ModelRootDomainRoleId, global::Ufba.ShHome.ModelRootHasTypes.TypeDomainRoleId);
				}

				return;
			}
				
			global::Ufba.ShHome.Device sourceDevice3 = sourceElement as global::Ufba.ShHome.Device;
			if (sourceDevice3 != null)
			{
				// Delete link for path ModelHasDevices.Devices
				
				foreach (DslModeling::ElementLink link in global::Ufba.ShHome.ModelHasDevices.GetLinks((global::Ufba.ShHome.ModelRoot)this, sourceDevice3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.ShHome.ModelHasDevices.ModelRootDomainRoleId, global::Ufba.ShHome.ModelHasDevices.DeviceDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainClass ModelClass
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ModelClass.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ModelClass.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("381ea111-fcf2-4b57-b08f-87e37122b4db")]
	public partial class ModelClass : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x381ea111, 0xfcf2, 0x4b57, 0xb0, 0x8f, 0x87, 0xe3, 0x71, 0x22, 0xb4, 0xdb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelClass(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelClass(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x8005df81, 0x3e86, 0x4f6d, 0x9b, 0xbd, 0x54, 0xed, 0x3b, 0xbd, 0x34, 0xde);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private NameFeature namePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelClass/Name.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelClass/Name.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8005df81-3e86-4f6d-9bbd-54ed3bbd34de")]
		public NameFeature Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, NameFeature>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed NameFeature GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, NameFeature newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				NameFeature oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TypeFeature domain property code
		
		/// <summary>
		/// TypeFeature domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeFeatureDomainPropertyId = new global::System.Guid(0x143e82e0, 0xa08a, 0x4fb4, 0x8a, 0x21, 0x9b, 0x06, 0x33, 0x87, 0x89, 0x71);
		
		/// <summary>
		/// Storage for TypeFeature
		/// </summary>
		private TypeFeature typeFeaturePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of TypeFeature domain property.
		/// Description for Ufba.ShHome.ModelClass.Type Feature
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelClass/TypeFeature.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelClass/TypeFeature.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("143e82e0-a08a-4fb4-8a21-9b0633878971")]
		public TypeFeature TypeFeature
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typeFeaturePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypeFeaturePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.TypeFeature domain property.
		/// </summary>
		internal sealed partial class TypeFeaturePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, TypeFeature>
		{
			private TypeFeaturePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.TypeFeature domain property value handler.
			/// </summary>
			public static readonly TypeFeaturePropertyHandler Instance = new TypeFeaturePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.TypeFeature domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeFeatureDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TypeFeature GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typeFeaturePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, TypeFeature newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TypeFeature oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typeFeaturePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Serial domain property code
		
		/// <summary>
		/// Serial domain property Id.
		/// </summary>
		public static readonly global::System.Guid SerialDomainPropertyId = new global::System.Guid(0xbce70a21, 0xcde2, 0x4743, 0x8a, 0xc1, 0x68, 0xad, 0x80, 0xbe, 0x4c, 0x68);
		
		/// <summary>
		/// Storage for Serial
		/// </summary>
		private global::System.String serialPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Serial domain property.
		/// Description for Ufba.ShHome.ModelClass.Serial
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelClass/Serial.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelClass/Serial.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bce70a21-cde2-4743-8ac1-68ad80be4c68")]
		public global::System.String Serial
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return serialPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SerialPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.Serial domain property.
		/// </summary>
		internal sealed partial class SerialPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private SerialPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.Serial domain property value handler.
			/// </summary>
			public static readonly SerialPropertyHandler Instance = new SerialPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.Serial domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SerialDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.serialPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.serialPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainClass Comment
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.Comment.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.Comment.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4284669d-6579-48a6-8f26-01a7b4be76d1")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4284669d, 0x6579, 0x48a6, 0x8f, 0x26, 0x01, 0xa7, 0xb4, 0xbe, 0x76, 0xd1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x49a3f2b3, 0x3522, 0x4eab, 0xb6, 0xab, 0x34, 0x60, 0x16, 0xb4, 0x3f, 0x99);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.Comment/Text.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.Comment/Text.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("49a3f2b3-3522-4eab-b6ab-346016b43f99")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.ShHome.ModelRootHasComments.CommentDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.ShHome.ModelRootHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Subjects opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(global::Ufba.ShHome.CommentReferencesSubjects.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainClass ModelType
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ModelType.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ModelType.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2ef705e6-eacb-4b79-b5f0-214f52aa74fc")]
	public abstract partial class ModelType : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2ef705e6, 0xeacb, 0x4b79, 0xb5, 0xf0, 0x21, 0x4f, 0x52, 0xaa, 0x74, 0xfc);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModelType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.ShHome.ModelRootHasTypes.TypeDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.ShHome.ModelRootHasTypes.TypeDomainRoleId, value);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Ufba.ShHome.CommentReferencesSubjects.SubjectDomainRoleId);
			}
		}
		#endregion
		#region Actuator opposite domain role accessor
		/// <summary>
		/// Gets or sets Actuator.
		/// Description for Ufba.ShHome.ModelTypeReferencesActuator.ModelType
		/// </summary>
		public virtual Device Actuator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.ShHome.ModelTypeReferencesActuator.ModelTypeDomainRoleId) as Device;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.ShHome.ModelTypeReferencesActuator.ModelTypeDomainRoleId, value);
			}
		}
		#endregion
		#region Sensor opposite domain role accessor
		/// <summary>
		/// Gets or sets Sensor.
		/// Description for Ufba.ShHome.ModelTypeReferencesSensor.ModelType
		/// </summary>
		public virtual Device Sensor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.ShHome.ModelTypeReferencesSensor.ModelTypeDomainRoleId) as Device;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.ShHome.ModelTypeReferencesSensor.ModelTypeDomainRoleId, value);
			}
		}
		#endregion
		#region Father opposite domain role accessor
		/// <summary>
		/// Gets or sets Father.
		/// Description for Ufba.ShHome.ModelTypeReferencesFather.SourceModelType
		/// </summary>
		public virtual ModelType Father
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.ShHome.ModelTypeReferencesFather.SourceModelTypeDomainRoleId) as ModelType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.ShHome.ModelTypeReferencesFather.SourceModelTypeDomainRoleId, value);
			}
		}
		#endregion
		#region ModelHasFather opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelHasFather.
		/// Description for Ufba.ShHome.ModelTypeReferencesFather.TargetModelType
		/// </summary>
		public virtual ModelType ModelHasFather
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.ShHome.ModelTypeReferencesFather.TargetModelTypeDomainRoleId) as ModelType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.ShHome.ModelTypeReferencesFather.TargetModelTypeDomainRoleId, value);
			}
		}
		#endregion
		#region Brother opposite domain role accessor
		/// <summary>
		/// Gets or sets Brother.
		/// Description for Ufba.ShHome.ModelTypeReferencesBrother.SourceModelType
		/// </summary>
		public virtual ModelType Brother
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.ShHome.ModelTypeReferencesBrother.SourceModelTypeDomainRoleId) as ModelType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.ShHome.ModelTypeReferencesBrother.SourceModelTypeDomainRoleId, value);
			}
		}
		#endregion
		#region ModelHasBrother opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelHasBrother.
		/// Description for Ufba.ShHome.ModelTypeReferencesBrother.TargetModelType
		/// </summary>
		public virtual ModelType ModelHasBrother
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.ShHome.ModelTypeReferencesBrother.TargetModelTypeDomainRoleId) as ModelType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.ShHome.ModelTypeReferencesBrother.TargetModelTypeDomainRoleId, value);
			}
		}
		#endregion
		#region Alternatives opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Alternatives.
		/// Description for Ufba.ShHome.ModelTypeReferencesAlternatives.SourceModelType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Alternatives
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(global::Ufba.ShHome.ModelTypeReferencesAlternatives.SourceModelTypeDomainRoleId);
			}
		}
		#endregion
		#region ModelHasAlternatives opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ModelHasAlternatives.
		/// Description for Ufba.ShHome.ModelTypeReferencesAlternatives.TargetModelType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> ModelHasAlternatives
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(global::Ufba.ShHome.ModelTypeReferencesAlternatives.TargetModelTypeDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ufba.ShHome.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Ufba.ShHome.Comment sourceComment1 = sourceElement as global::Ufba.ShHome.Comment;
			if (sourceComment1 != null)
			{
				// Create link for path CommentReferencesSubjects.Comments
				this.Comments.Add(sourceComment1);

				// Create link for path ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments
						// Segments 0 and 1
						global::Ufba.ShHome.ModelRoot commentHost1 = this.ModelRoot;
						if ( commentHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
				commentHost1.Comments.Add(sourceComment1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Ufba.ShHome.Comment sourceComment1 = sourceElement as global::Ufba.ShHome.Comment;
			if (sourceComment1 != null)
			{
				// Delete link for path CommentReferencesSubjects.Comments
				
				foreach (DslModeling::ElementLink link in global::Ufba.ShHome.CommentReferencesSubjects.GetLinks(sourceComment1, (global::Ufba.ShHome.ModelType)this))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.ShHome.CommentReferencesSubjects.SubjectDomainRoleId, global::Ufba.ShHome.CommentReferencesSubjects.CommentDomainRoleId);
				}

				// Delete link for path ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments
					// Segments 0 and 1
					global::Ufba.ShHome.ModelRoot commentHost1 = this.ModelRoot;
					if ( commentHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
				
				foreach (DslModeling::ElementLink link in global::Ufba.ShHome.ModelRootHasComments.GetLinks((global::Ufba.ShHome.ModelRoot)commentHost1, sourceComment1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.ShHome.ModelRootHasComments.ModelRootDomainRoleId, global::Ufba.ShHome.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainClass Device
	/// Description for Ufba.ShHome.Device
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.Device.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.Device.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("08b1fe94-efc9-4944-8c54-037a147c9331")]
	public partial class Device : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Device domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x08b1fe94, 0xefc9, 0x4944, 0x8c, 0x54, 0x03, 0x7a, 0x14, 0x7c, 0x93, 0x31);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Device(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Device(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xe36a8795, 0x537d, 0x4446, 0x86, 0xcd, 0x68, 0x48, 0x17, 0xd5, 0x58, 0x83);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Ufba.ShHome.Device.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.Device/Name.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.Device/Name.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e36a8795-537d-4446-86cd-684817d55883")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Device.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Device, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Device.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Device.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Device element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Device element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TypeDevice domain property code
		
		/// <summary>
		/// TypeDevice domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDeviceDomainPropertyId = new global::System.Guid(0x00270314, 0x107d, 0x481b, 0x89, 0x75, 0xfd, 0xef, 0x25, 0x11, 0x39, 0xb8);
		
		/// <summary>
		/// Storage for TypeDevice
		/// </summary>
		private TypeDevice typeDevicePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of TypeDevice domain property.
		/// Description for Ufba.ShHome.Device.Type Device
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.Device/TypeDevice.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.Device/TypeDevice.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("00270314-107d-481b-8975-fdef251139b8")]
		public TypeDevice TypeDevice
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typeDevicePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypeDevicePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Device.TypeDevice domain property.
		/// </summary>
		internal sealed partial class TypeDevicePropertyHandler : DslModeling::DomainPropertyValueHandler<Device, TypeDevice>
		{
			private TypeDevicePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Device.TypeDevice domain property value handler.
			/// </summary>
			public static readonly TypeDevicePropertyHandler Instance = new TypeDevicePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Device.TypeDevice domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDeviceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TypeDevice GetValue(Device element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typeDevicePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Device element, TypeDevice newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TypeDevice oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typeDevicePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReturnType domain property code
		
		/// <summary>
		/// ReturnType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReturnTypeDomainPropertyId = new global::System.Guid(0xdea42edd, 0x6702, 0x4216, 0xae, 0x4b, 0xe7, 0xe4, 0xbc, 0x27, 0x13, 0x78);
		
		/// <summary>
		/// Storage for ReturnType
		/// </summary>
		private ReturnType returnTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ReturnType domain property.
		/// Description for Ufba.ShHome.Device.Return Type
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.Device/ReturnType.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.Device/ReturnType.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("dea42edd-6702-4216-ae4b-e7e4bc271378")]
		public ReturnType ReturnType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return returnTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReturnTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Device.ReturnType domain property.
		/// </summary>
		internal sealed partial class ReturnTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Device, ReturnType>
		{
			private ReturnTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Device.ReturnType domain property value handler.
			/// </summary>
			public static readonly ReturnTypePropertyHandler Instance = new ReturnTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Device.ReturnType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReturnTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReturnType GetValue(Device element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.returnTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Device element, ReturnType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ReturnType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.returnTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// Description for Ufba.ShHome.ModelHasDevices.Device
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.ShHome.ModelHasDevices.DeviceDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.ShHome.ModelHasDevices.DeviceDomainRoleId, value);
			}
		}
		#endregion
		#region FeatureHasActuator opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FeatureHasActuator.
		/// Description for Ufba.ShHome.ModelTypeReferencesActuator.Device
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> FeatureHasActuator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(global::Ufba.ShHome.ModelTypeReferencesActuator.DeviceDomainRoleId);
			}
		}
		#endregion
		#region FeatureHasSensor opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FeatureHasSensor.
		/// Description for Ufba.ShHome.ModelTypeReferencesSensor.Device
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> FeatureHasSensor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(global::Ufba.ShHome.ModelTypeReferencesSensor.DeviceDomainRoleId);
			}
		}
		#endregion
	}
}
