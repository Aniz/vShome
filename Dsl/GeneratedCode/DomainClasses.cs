//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainClass NamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.NamedElement.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.NamedElement.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("1ba08539-40b9-4b77-80c6-7663de5733a8")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1ba08539, 0x40b9, 0x4b77, 0x80, 0xc6, 0x76, 0x63, 0xde, 0x57, 0x33, 0xa8);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3ad458a6, 0x754f, 0x4f20, 0xad, 0xfc, 0xe6, 0x53, 0xce, 0x85, 0x7c, 0x93);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.NamedElement/Name.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.NamedElement/Name.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("3ad458a6-754f-4f20-adfc-e653ce857c93")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainClass ModelRoot
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ModelRoot.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ModelRoot.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e0be5be1-3d03-4c20-8d94-df0429281519")]
	public partial class ModelRoot : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe0be5be1, 0x3d03, 0x4c20, 0x8d, 0x94, 0xdf, 0x04, 0x29, 0x28, 0x15, 0x19);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Sensors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sensors.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Sensor> Sensors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Sensor>, Sensor>(global::Ufba.ShHome.ModelRootHasSensors.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region Types opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Types
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(global::Ufba.ShHome.ModelRootHasTypes.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ufba.ShHome.ModelType.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ufba.ShHome.Sensor.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Ufba.ShHome.ModelType sourceModelType1 = sourceElement as global::Ufba.ShHome.ModelType;
			if (sourceModelType1 != null)
			{
				// Create link for path ModelRootHasTypes.Types
				this.Types.Add(sourceModelType1);

				return;
			}
				
			global::Ufba.ShHome.Sensor sourceSensor2 = sourceElement as global::Ufba.ShHome.Sensor;
			if (sourceSensor2 != null)
			{
				// Create link for path ModelRootHasSensors.Sensors
				this.Sensors.Add(sourceSensor2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Ufba.ShHome.ModelType sourceModelType1 = sourceElement as global::Ufba.ShHome.ModelType;
			if (sourceModelType1 != null)
			{
				// Delete link for path ModelRootHasTypes.Types
				
				foreach (DslModeling::ElementLink link in global::Ufba.ShHome.ModelRootHasTypes.GetLinks((global::Ufba.ShHome.ModelRoot)this, sourceModelType1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.ShHome.ModelRootHasTypes.ModelRootDomainRoleId, global::Ufba.ShHome.ModelRootHasTypes.TypeDomainRoleId);
				}

				return;
			}
				
			global::Ufba.ShHome.Sensor sourceSensor2 = sourceElement as global::Ufba.ShHome.Sensor;
			if (sourceSensor2 != null)
			{
				// Delete link for path ModelRootHasSensors.Sensors
				
				foreach (DslModeling::ElementLink link in global::Ufba.ShHome.ModelRootHasSensors.GetLinks((global::Ufba.ShHome.ModelRoot)this, sourceSensor2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.ShHome.ModelRootHasSensors.ModelRootDomainRoleId, global::Ufba.ShHome.ModelRootHasSensors.SensorDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainClass ModelClass
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ModelClass.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ModelClass.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("381ea111-fcf2-4b57-b08f-87e37122b4db")]
	public partial class ModelClass : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x381ea111, 0xfcf2, 0x4b57, 0xb0, 0x8f, 0x87, 0xe3, 0x71, 0x22, 0xb4, 0xdb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelClass(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelClass(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Kind domain property code
		
		/// <summary>
		/// Kind domain property Id.
		/// </summary>
		public static readonly global::System.Guid KindDomainPropertyId = new global::System.Guid(0x8005df81, 0x3e86, 0x4f6d, 0x9b, 0xbd, 0x54, 0xed, 0x3b, 0xbd, 0x34, 0xde);
		
		/// <summary>
		/// Storage for Kind
		/// </summary>
		private global::System.String kindPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Kind domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelClass/Kind.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelClass/Kind.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("8005df81-3e86-4f6d-9bbd-54ed3bbd34de")]
		public global::System.String Kind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return kindPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KindPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.Kind domain property.
		/// </summary>
		internal sealed partial class KindPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private KindPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.Kind domain property value handler.
			/// </summary>
			public static readonly KindPropertyHandler Instance = new KindPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.Kind domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KindDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.kindPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.kindPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsAbstract domain property code
		
		/// <summary>
		/// IsAbstract domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAbstractDomainPropertyId = new global::System.Guid(0x67eb5c64, 0xddc3, 0x47b8, 0xa6, 0xd2, 0x17, 0xc1, 0xe5, 0x35, 0x3e, 0xd7);
		
		/// <summary>
		/// Storage for IsAbstract
		/// </summary>
		private InheritanceModifier isAbstractPropertyStorage = InheritanceModifier.None;
		
		/// <summary>
		/// Gets or sets the value of IsAbstract domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelClass/IsAbstract.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelClass/IsAbstract.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(InheritanceModifier.None)]
		[DslModeling::DomainObjectId("67eb5c64-ddc3-47b8-a6d2-17c1e5353ed7")]
		public InheritanceModifier IsAbstract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAbstractPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAbstractPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsAbstract domain property.
		/// </summary>
		internal sealed partial class IsAbstractPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, InheritanceModifier>
		{
			private IsAbstractPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsAbstract domain property value handler.
			/// </summary>
			public static readonly IsAbstractPropertyHandler Instance = new IsAbstractPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsAbstract domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAbstractDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed InheritanceModifier GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAbstractPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, InheritanceModifier newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				InheritanceModifier oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAbstractPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Subclasses opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> Subclasses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::Ufba.ShHome.Generalization.SuperclassDomainRoleId);
			}
		}
		#endregion
		#region Superclass opposite domain role accessor
		/// <summary>
		/// Gets or sets Superclass.
		/// </summary>
		public virtual ModelClass Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.ShHome.Generalization.SubclassDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.ShHome.Generalization.SubclassDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainClass Sensor
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.Sensor.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.Sensor.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4284669d-6579-48a6-8f26-01a7b4be76d1")]
	public partial class Sensor : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Sensor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4284669d, 0x6579, 0x48a6, 0x8f, 0x26, 0x01, 0xa7, 0xb4, 0xbe, 0x76, 0xd1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Sensor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Sensor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x49a3f2b3, 0x3522, 0x4eab, 0xb6, 0xab, 0x34, 0x60, 0x16, 0xb4, 0x3f, 0x99);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.Sensor/Text.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.Sensor/Text.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("49a3f2b3-3522-4eab-b6ab-346016b43f99")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Sensor.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Sensor, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Sensor.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Sensor.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Sensor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Sensor element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.ShHome.ModelRootHasSensors.SensorDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.ShHome.ModelRootHasSensors.SensorDomainRoleId, value);
			}
		}
		#endregion
		#region Subjects opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(global::Ufba.ShHome.SensorReferencesSubjects.SensorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainClass ClassOperation
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ClassOperation.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ClassOperation.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0f7cc8d0-4848-486f-aee1-dd565bfb206d")]
	public partial class ClassOperation : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassOperation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0f7cc8d0, 0x4848, 0x486f, 0xae, 0xe1, 0xdd, 0x56, 0x5b, 0xfb, 0x20, 0x6d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassOperation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassOperation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsAbstract domain property code
		
		/// <summary>
		/// IsAbstract domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAbstractDomainPropertyId = new global::System.Guid(0x4758d053, 0xfca8, 0x4f28, 0x8c, 0x59, 0x74, 0x6f, 0x8a, 0x74, 0x7f, 0x3d);
		
		/// <summary>
		/// Storage for IsAbstract
		/// </summary>
		private global::System.Boolean isAbstractPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAbstract domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ClassOperation/IsAbstract.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ClassOperation/IsAbstract.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4758d053-fca8-4f28-8c59-746f8a747f3d")]
		public global::System.Boolean IsAbstract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAbstractPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAbstractPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassOperation.IsAbstract domain property.
		/// </summary>
		internal sealed partial class IsAbstractPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassOperation, global::System.Boolean>
		{
			private IsAbstractPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassOperation.IsAbstract domain property value handler.
			/// </summary>
			public static readonly IsAbstractPropertyHandler Instance = new IsAbstractPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassOperation.IsAbstract domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAbstractDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ClassOperation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAbstractPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassOperation element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAbstractPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainClass ModelType
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ModelType.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ModelType.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2ef705e6-eacb-4b79-b5f0-214f52aa74fc")]
	public abstract partial class ModelType : ClassModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2ef705e6, 0xeacb, 0x4b79, 0xb5, 0xf0, 0x21, 0x4f, 0x52, 0xaa, 0x74, 0xfc);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModelType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Ufba.ShHome.ModelRootHasTypes.TypeDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Ufba.ShHome.ModelRootHasTypes.TypeDomainRoleId, value);
			}
		}
		#endregion
		#region Sensors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sensors.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Sensor> Sensors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Sensor>, Sensor>(global::Ufba.ShHome.SensorReferencesSubjects.SubjectDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Ufba.ShHome.Sensor.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Ufba.ShHome.Sensor sourceSensor1 = sourceElement as global::Ufba.ShHome.Sensor;
			if (sourceSensor1 != null)
			{
				// Create link for path SensorReferencesSubjects.Sensors
				this.Sensors.Add(sourceSensor1);

				// Create link for path ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasSensors.Sensors
						// Segments 0 and 1
						global::Ufba.ShHome.ModelRoot sensorHost1 = this.ModelRoot;
						if ( sensorHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasSensors.Sensors'.");
				sensorHost1.Sensors.Add(sourceSensor1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Ufba.ShHome.Sensor sourceSensor1 = sourceElement as global::Ufba.ShHome.Sensor;
			if (sourceSensor1 != null)
			{
				// Delete link for path SensorReferencesSubjects.Sensors
				
				foreach (DslModeling::ElementLink link in global::Ufba.ShHome.SensorReferencesSubjects.GetLinks(sourceSensor1, (global::Ufba.ShHome.ModelType)this))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.ShHome.SensorReferencesSubjects.SubjectDomainRoleId, global::Ufba.ShHome.SensorReferencesSubjects.SensorDomainRoleId);
				}

				// Delete link for path ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasSensors.Sensors
					// Segments 0 and 1
					global::Ufba.ShHome.ModelRoot sensorHost1 = this.ModelRoot;
					if ( sensorHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasSensors.Sensors'.");
				
				foreach (DslModeling::ElementLink link in global::Ufba.ShHome.ModelRootHasSensors.GetLinks((global::Ufba.ShHome.ModelRoot)sensorHost1, sourceSensor1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Ufba.ShHome.ModelRootHasSensors.ModelRootDomainRoleId, global::Ufba.ShHome.ModelRootHasSensors.SensorDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainClass ClassModelElement
	/// Element with a Description
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ClassModelElement.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ClassModelElement.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c15e65ea-6081-4380-b1a0-1355ccaa2586")]
	public abstract partial class ClassModelElement : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassModelElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc15e65ea, 0x6081, 0x4380, 0xb1, 0xa0, 0x13, 0x55, 0xcc, 0xaa, 0x25, 0x86);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ClassModelElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x9b0c55c2, 0x5c61, 0x4ee1, 0xae, 0x89, 0x7a, 0x1b, 0xf6, 0x9d, 0x21, 0xc3);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// This is a Description.
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ClassModelElement/Description.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ClassModelElement/Description.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("9b0c55c2-5c61-4ee1-ae89-7a1bf69d21c3")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassModelElement.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassModelElement, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassModelElement.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassModelElement.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassModelElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassModelElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
