//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainRelationship ModelRootHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ModelRootHasComments.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ModelRootHasComments.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a21cfac0-57d7-423f-9331-e02f406905b8")]
	public partial class ModelRootHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa21cfac0, 0x57d7, 0x423f, 0x93, 0x31, 0xe0, 0x2f, 0x40, 0x69, 0x05, 0xb8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasComments link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ModelRootHasComments(ModelRoot source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasComments.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x9d2645e3, 0x945b, 0x48eb, 0xa8, 0xb5, 0xe5, 0xa8, 0x8f, 0x1c, 0xa2, 0xcb);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelRootHasComments/ModelRoot.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelRootHasComments/ModelRoot.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="Ufba.ShHome.ModelRootHasComments/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9d2645e3-945b-48eb-a8b5-e5a88f1ca2cb")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a Comment
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(Comment element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newModelRoot);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x590a8a57, 0xc219, 0x405d, 0x9d, 0x0a, 0xab, 0xf8, 0xa1, 0xb9, 0xa3, 0x23);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelRootHasComments/Comment.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelRootHasComments/Comment.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="Ufba.ShHome.ModelRootHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("590a8a57-c219-405d-9d0a-abf8a1b9a323")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelRoot
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasComments links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelRootHasComments> GetLinksToComments ( global::Ufba.ShHome.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelRootHasComments>(modelRootInstance, global::Ufba.ShHome.ModelRootHasComments.ModelRootDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ModelRootHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelRootHasComments GetLinkToModelRoot (global::Ufba.ShHome.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelRootHasComments>(commentInstance, global::Ufba.ShHome.ModelRootHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasComments instance accessors
		
		/// <summary>
		/// Get any ModelRootHasComments links between a given ModelRoot and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelRootHasComments> GetLinks( global::Ufba.ShHome.ModelRoot source, global::Ufba.ShHome.Comment target )
		{
			global::System.Collections.Generic.List<global::Ufba.ShHome.ModelRootHasComments> outLinks = new global::System.Collections.Generic.List<global::Ufba.ShHome.ModelRootHasComments>();
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelRootHasComments>(source, global::Ufba.ShHome.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasComments link between a given ModelRootand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelRootHasComments GetLink( global::Ufba.ShHome.ModelRoot source, global::Ufba.ShHome.Comment target )
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelRootHasComments>(source, global::Ufba.ShHome.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainRelationship ModelRootHasTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ModelRootHasTypes.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ModelRootHasTypes.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5a02d0cf-8aab-40e5-9405-f3c3c3cc5a27")]
	public partial class ModelRootHasTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5a02d0cf, 0x8aab, 0x40e5, 0x94, 0x05, 0xf3, 0xc3, 0xc3, 0xcc, 0x5a, 0x27);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasTypes link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public ModelRootHasTypes(ModelRoot source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasTypes.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasTypes.TypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0xfeb179cb, 0x09c8, 0x4cac, 0xa7, 0xc0, 0x4c, 0x11, 0x90, 0xe4, 0x28, 0xc0);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelRootHasTypes/ModelRoot.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelRootHasTypes/ModelRoot.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="Ufba.ShHome.ModelRootHasTypes/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("feb179cb-09c8-4cac-a7c0-4c1190e428c0")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a ModelType
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TypeDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(ModelType element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TypeDomainRoleId, newModelRoot);
		}
		#endregion
		#region Type domain role code
		
		/// <summary>
		/// Type domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainRoleId = new global::System.Guid(0x37a1dc4d, 0x5cfc, 0x4e77, 0xba, 0xea, 0x63, 0x16, 0xf8, 0xc1, 0x11, 0xea);
		
		/// <summary>
		/// DomainRole Type
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelRootHasTypes/Type.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelRootHasTypes/Type.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("37a1dc4d-5cfc-4e77-baea-6316f8c111ea")]
		public virtual ModelType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a ModelRoot
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetTypes(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasTypes links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelRootHasTypes> GetLinksToTypes ( global::Ufba.ShHome.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelRootHasTypes>(modelRootInstance, global::Ufba.ShHome.ModelRootHasTypes.ModelRootDomainRoleId);
		}
		#endregion
		#region Type link accessor
		/// <summary>
		/// Get the ModelRootHasTypes link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelRootHasTypes GetLinkToModelRoot (global::Ufba.ShHome.ModelType typeInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelRootHasTypes>(typeInstance, global::Ufba.ShHome.ModelRootHasTypes.TypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Type not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasTypes instance accessors
		
		/// <summary>
		/// Get any ModelRootHasTypes links between a given ModelRoot and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelRootHasTypes> GetLinks( global::Ufba.ShHome.ModelRoot source, global::Ufba.ShHome.ModelType target )
		{
			global::System.Collections.Generic.List<global::Ufba.ShHome.ModelRootHasTypes> outLinks = new global::System.Collections.Generic.List<global::Ufba.ShHome.ModelRootHasTypes>();
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelRootHasTypes>(source, global::Ufba.ShHome.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.Type) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasTypes link between a given ModelRootand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelRootHasTypes GetLink( global::Ufba.ShHome.ModelRoot source, global::Ufba.ShHome.ModelType target )
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelRootHasTypes>(source, global::Ufba.ShHome.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.Type) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainRelationship CommentReferencesSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.CommentReferencesSubjects.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.CommentReferencesSubjects.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0744a2a1-261a-40e2-ad1d-d590a9f01abc")]
	public partial class CommentReferencesSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0744a2a1, 0x261a, 0x40e2, 0xad, 0x1d, 0xd5, 0x90, 0xa9, 0xf0, 0x1a, 0xbc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesSubjects link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public CommentReferencesSubjects(Comment source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesSubjects.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesSubjects.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x5f102ffd, 0x9d32, 0x4f2b, 0xb1, 0xe8, 0xcc, 0x6f, 0xc2, 0x55, 0x5b, 0xc4);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.CommentReferencesSubjects/Comment.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.CommentReferencesSubjects/Comment.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="Ufba.ShHome.CommentReferencesSubjects/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5f102ffd-9d32-4f2b-b1e8-cc6fc2555bc4")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelType
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0x4f55a23a, 0x7939, 0x48b3, 0x92, 0xa5, 0xd1, 0x3f, 0x26, 0xfb, 0x77, 0xfc);
		
		/// <summary>
		/// DomainRole Subject
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.CommentReferencesSubjects/Subject.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.CommentReferencesSubjects/Subject.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="Ufba.ShHome.CommentReferencesSubjects/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4f55a23a-7939-48b3-92a5-d13f26fb77fc")]
		public virtual ModelType Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetSubjects(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.CommentReferencesSubjects> GetLinksToSubjects ( global::Ufba.ShHome.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.CommentReferencesSubjects>(commentInstance, global::Ufba.ShHome.CommentReferencesSubjects.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.CommentReferencesSubjects> GetLinksToComments ( global::Ufba.ShHome.ModelType subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.CommentReferencesSubjects>(subjectInstance, global::Ufba.ShHome.CommentReferencesSubjects.SubjectDomainRoleId);
		}
		#endregion
		#region CommentReferencesSubjects instance accessors
		
		/// <summary>
		/// Get any CommentReferencesSubjects links between a given Comment and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.CommentReferencesSubjects> GetLinks( global::Ufba.ShHome.Comment source, global::Ufba.ShHome.ModelType target )
		{
			global::System.Collections.Generic.List<global::Ufba.ShHome.CommentReferencesSubjects> outLinks = new global::System.Collections.Generic.List<global::Ufba.ShHome.CommentReferencesSubjects>();
			global::System.Collections.Generic.IList<global::Ufba.ShHome.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.CommentReferencesSubjects>(source, global::Ufba.ShHome.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::Ufba.ShHome.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesSubjects link between a given Commentand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.CommentReferencesSubjects GetLink( global::Ufba.ShHome.Comment source, global::Ufba.ShHome.ModelType target )
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.CommentReferencesSubjects>(source, global::Ufba.ShHome.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::Ufba.ShHome.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainRelationship ModelHasDevices
	/// Description for Ufba.ShHome.ModelHasDevices
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ModelHasDevices.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ModelHasDevices.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5586c5ea-8b4a-466c-9d53-32fad4940d9e")]
	public partial class ModelHasDevices : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasDevices domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5586c5ea, 0x8b4a, 0x466c, 0x9d, 0x53, 0x32, 0xfa, 0xd4, 0x94, 0x0d, 0x9e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasDevices link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">Device to use as the target of the relationship.</param>
		public ModelHasDevices(ModelRoot source, Device target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasDevices.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasDevices.DeviceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasDevices(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasDevices(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasDevices(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasDevices(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0xdc394f86, 0x3538, 0x4acd, 0xa8, 0x64, 0xa7, 0x82, 0x37, 0x56, 0xf6, 0xb5);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// Description for Ufba.ShHome.ModelHasDevices.ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelHasDevices/ModelRoot.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelHasDevices/ModelRoot.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Devices", PropertyDisplayNameKey="Ufba.ShHome.ModelHasDevices/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dc394f86-3538-4acd-a864-a7823756f6b5")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a Device
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(Device element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DeviceDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(Device element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DeviceDomainRoleId, newModelRoot);
		}
		#endregion
		#region Device domain role code
		
		/// <summary>
		/// Device domain role Id.
		/// </summary>
		public static readonly global::System.Guid DeviceDomainRoleId = new global::System.Guid(0x10ad6d90, 0x0120, 0x4e7d, 0x99, 0xdb, 0x77, 0x17, 0xcb, 0xe9, 0x7e, 0xf9);
		
		/// <summary>
		/// DomainRole Device
		/// Description for Ufba.ShHome.ModelHasDevices.Device
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelHasDevices/Device.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelHasDevices/Device.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="Ufba.ShHome.ModelHasDevices/Device.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("10ad6d90-0120-4e7d-99db-7717cbe97ef9")]
		public virtual Device Device
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Device)DslModeling::DomainRoleInfo.GetRolePlayer(this, DeviceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DeviceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Devices of a ModelRoot
		/// <summary>
		/// Gets a list of Devices.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Device> GetDevices(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Device>, Device>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelHasDevices links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelHasDevices> GetLinksToDevices ( global::Ufba.ShHome.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelHasDevices>(modelRootInstance, global::Ufba.ShHome.ModelHasDevices.ModelRootDomainRoleId);
		}
		#endregion
		#region Device link accessor
		/// <summary>
		/// Get the ModelHasDevices link to a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelHasDevices GetLinkToModelRoot (global::Ufba.ShHome.Device deviceInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelHasDevices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelHasDevices>(deviceInstance, global::Ufba.ShHome.ModelHasDevices.DeviceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Device not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasDevices instance accessors
		
		/// <summary>
		/// Get any ModelHasDevices links between a given ModelRoot and a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelHasDevices> GetLinks( global::Ufba.ShHome.ModelRoot source, global::Ufba.ShHome.Device target )
		{
			global::System.Collections.Generic.List<global::Ufba.ShHome.ModelHasDevices> outLinks = new global::System.Collections.Generic.List<global::Ufba.ShHome.ModelHasDevices>();
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelHasDevices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelHasDevices>(source, global::Ufba.ShHome.ModelHasDevices.ModelRootDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelHasDevices link in links )
			{
				if ( target.Equals(link.Device) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasDevices link between a given ModelRootand a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelHasDevices GetLink( global::Ufba.ShHome.ModelRoot source, global::Ufba.ShHome.Device target )
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelHasDevices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelHasDevices>(source, global::Ufba.ShHome.ModelHasDevices.ModelRootDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelHasDevices link in links )
			{
				if ( target.Equals(link.Device) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainRelationship ModelTypeReferencesActuator
	/// Description for Ufba.ShHome.ModelTypeReferencesActuator
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesActuator.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesActuator.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("432baed8-f41b-478e-9a6d-a9ab3b739c6d")]
	public partial class ModelTypeReferencesActuator : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTypeReferencesActuator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x432baed8, 0xf41b, 0x478e, 0x9a, 0x6d, 0xa9, 0xab, 0x3b, 0x73, 0x9c, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTypeReferencesActuator link in the same Partition as the given ModelType
		/// </summary>
		/// <param name="source">ModelType to use as the source of the relationship.</param>
		/// <param name="target">Device to use as the target of the relationship.</param>
		public ModelTypeReferencesActuator(ModelType source, Device target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTypeReferencesActuator.ModelTypeDomainRoleId, source), new DslModeling::RoleAssignment(ModelTypeReferencesActuator.DeviceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTypeReferencesActuator(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTypeReferencesActuator(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTypeReferencesActuator(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTypeReferencesActuator(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelType domain role code
		
		/// <summary>
		/// ModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelTypeDomainRoleId = new global::System.Guid(0x2121fa4e, 0x9284, 0x4b69, 0xb6, 0xae, 0x69, 0x2e, 0x67, 0x77, 0xa4, 0x5e);
		
		/// <summary>
		/// DomainRole ModelType
		/// Description for Ufba.ShHome.ModelTypeReferencesActuator.ModelType
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesActuator/ModelType.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesActuator/ModelType.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Actuator", PropertyDisplayNameKey="Ufba.ShHome.ModelTypeReferencesActuator/ModelType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2121fa4e-9284-4b69-b6ae-692e6777a45e")]
		public virtual ModelType ModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FeatureHasActuator of a Device
		/// <summary>
		/// Gets a list of FeatureHasActuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetFeatureHasActuator(Device element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, DeviceDomainRoleId);
		}
		#endregion
		#region Device domain role code
		
		/// <summary>
		/// Device domain role Id.
		/// </summary>
		public static readonly global::System.Guid DeviceDomainRoleId = new global::System.Guid(0x19a27655, 0xd83b, 0x40e6, 0xbe, 0x00, 0xaf, 0x56, 0x74, 0x76, 0x36, 0xd6);
		
		/// <summary>
		/// DomainRole Device
		/// Description for Ufba.ShHome.ModelTypeReferencesActuator.Device
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesActuator/Device.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesActuator/Device.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FeatureHasActuator", PropertyDisplayNameKey="Ufba.ShHome.ModelTypeReferencesActuator/Device.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("19a27655-d83b-40e6-be00-af56747636d6")]
		public virtual Device Device
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Device)DslModeling::DomainRoleInfo.GetRolePlayer(this, DeviceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DeviceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Actuator of a ModelType
		/// <summary>
		/// Gets Actuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Device GetActuator(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelTypeDomainRoleId) as Device;
		}
		
		/// <summary>
		/// Sets Actuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetActuator(ModelType element, Device newDevice)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelTypeDomainRoleId, newDevice);
		}
		#endregion
		#region ModelType link accessor
		/// <summary>
		/// Get the ModelTypeReferencesActuator link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelTypeReferencesActuator GetLinkToActuator (global::Ufba.ShHome.ModelType modelTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesActuator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesActuator>(modelTypeInstance, global::Ufba.ShHome.ModelTypeReferencesActuator.ModelTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Device link accessor
		/// <summary>
		/// Get the list of ModelTypeReferencesActuator links to a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelTypeReferencesActuator> GetLinksToFeatureHasActuator ( global::Ufba.ShHome.Device deviceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesActuator>(deviceInstance, global::Ufba.ShHome.ModelTypeReferencesActuator.DeviceDomainRoleId);
		}
		#endregion
		#region ModelTypeReferencesActuator instance accessors
		
		/// <summary>
		/// Get any ModelTypeReferencesActuator links between a given ModelType and a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelTypeReferencesActuator> GetLinks( global::Ufba.ShHome.ModelType source, global::Ufba.ShHome.Device target )
		{
			global::System.Collections.Generic.List<global::Ufba.ShHome.ModelTypeReferencesActuator> outLinks = new global::System.Collections.Generic.List<global::Ufba.ShHome.ModelTypeReferencesActuator>();
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesActuator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesActuator>(source, global::Ufba.ShHome.ModelTypeReferencesActuator.ModelTypeDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelTypeReferencesActuator link in links )
			{
				if ( target.Equals(link.Device) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTypeReferencesActuator link between a given ModelTypeand a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelTypeReferencesActuator GetLink( global::Ufba.ShHome.ModelType source, global::Ufba.ShHome.Device target )
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesActuator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesActuator>(source, global::Ufba.ShHome.ModelTypeReferencesActuator.ModelTypeDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelTypeReferencesActuator link in links )
			{
				if ( target.Equals(link.Device) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainRelationship ModelTypeReferencesSensor
	/// Description for Ufba.ShHome.ModelTypeReferencesSensor
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesSensor.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesSensor.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c8a4242b-72a8-48ed-aff4-0e859002bda0")]
	public partial class ModelTypeReferencesSensor : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTypeReferencesSensor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc8a4242b, 0x72a8, 0x48ed, 0xaf, 0xf4, 0x0e, 0x85, 0x90, 0x02, 0xbd, 0xa0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTypeReferencesSensor link in the same Partition as the given ModelType
		/// </summary>
		/// <param name="source">ModelType to use as the source of the relationship.</param>
		/// <param name="target">Device to use as the target of the relationship.</param>
		public ModelTypeReferencesSensor(ModelType source, Device target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTypeReferencesSensor.ModelTypeDomainRoleId, source), new DslModeling::RoleAssignment(ModelTypeReferencesSensor.DeviceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTypeReferencesSensor(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTypeReferencesSensor(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTypeReferencesSensor(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTypeReferencesSensor(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelType domain role code
		
		/// <summary>
		/// ModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelTypeDomainRoleId = new global::System.Guid(0x44ce0027, 0x5065, 0x42ee, 0x9e, 0x06, 0x56, 0x1a, 0x5a, 0xdb, 0x61, 0xac);
		
		/// <summary>
		/// DomainRole ModelType
		/// Description for Ufba.ShHome.ModelTypeReferencesSensor.ModelType
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesSensor/ModelType.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesSensor/ModelType.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Sensor", PropertyDisplayNameKey="Ufba.ShHome.ModelTypeReferencesSensor/ModelType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("44ce0027-5065-42ee-9e06-561a5adb61ac")]
		public virtual ModelType ModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FeatureHasSensor of a Device
		/// <summary>
		/// Gets a list of FeatureHasSensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetFeatureHasSensor(Device element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, DeviceDomainRoleId);
		}
		#endregion
		#region Device domain role code
		
		/// <summary>
		/// Device domain role Id.
		/// </summary>
		public static readonly global::System.Guid DeviceDomainRoleId = new global::System.Guid(0x21c8fb67, 0xaa3c, 0x4fa1, 0x80, 0x9e, 0xc2, 0x06, 0x0c, 0xaa, 0x26, 0x16);
		
		/// <summary>
		/// DomainRole Device
		/// Description for Ufba.ShHome.ModelTypeReferencesSensor.Device
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesSensor/Device.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesSensor/Device.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FeatureHasSensor", PropertyDisplayNameKey="Ufba.ShHome.ModelTypeReferencesSensor/Device.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("21c8fb67-aa3c-4fa1-809e-c2060caa2616")]
		public virtual Device Device
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Device)DslModeling::DomainRoleInfo.GetRolePlayer(this, DeviceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DeviceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sensor of a ModelType
		/// <summary>
		/// Gets Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Device GetSensor(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelTypeDomainRoleId) as Device;
		}
		
		/// <summary>
		/// Sets Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSensor(ModelType element, Device newDevice)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelTypeDomainRoleId, newDevice);
		}
		#endregion
		#region ModelType link accessor
		/// <summary>
		/// Get the ModelTypeReferencesSensor link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelTypeReferencesSensor GetLinkToSensor (global::Ufba.ShHome.ModelType modelTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesSensor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesSensor>(modelTypeInstance, global::Ufba.ShHome.ModelTypeReferencesSensor.ModelTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Device link accessor
		/// <summary>
		/// Get the list of ModelTypeReferencesSensor links to a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelTypeReferencesSensor> GetLinksToFeatureHasSensor ( global::Ufba.ShHome.Device deviceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesSensor>(deviceInstance, global::Ufba.ShHome.ModelTypeReferencesSensor.DeviceDomainRoleId);
		}
		#endregion
		#region ModelTypeReferencesSensor instance accessors
		
		/// <summary>
		/// Get any ModelTypeReferencesSensor links between a given ModelType and a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelTypeReferencesSensor> GetLinks( global::Ufba.ShHome.ModelType source, global::Ufba.ShHome.Device target )
		{
			global::System.Collections.Generic.List<global::Ufba.ShHome.ModelTypeReferencesSensor> outLinks = new global::System.Collections.Generic.List<global::Ufba.ShHome.ModelTypeReferencesSensor>();
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesSensor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesSensor>(source, global::Ufba.ShHome.ModelTypeReferencesSensor.ModelTypeDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelTypeReferencesSensor link in links )
			{
				if ( target.Equals(link.Device) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTypeReferencesSensor link between a given ModelTypeand a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelTypeReferencesSensor GetLink( global::Ufba.ShHome.ModelType source, global::Ufba.ShHome.Device target )
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesSensor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesSensor>(source, global::Ufba.ShHome.ModelTypeReferencesSensor.ModelTypeDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelTypeReferencesSensor link in links )
			{
				if ( target.Equals(link.Device) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainRelationship ModelTypeReferencesFather
	/// Description for Ufba.ShHome.ModelTypeReferencesFather
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesFather.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesFather.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("032f37ab-dce0-463c-8708-566a90b257c0")]
	public partial class ModelTypeReferencesFather : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTypeReferencesFather domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x032f37ab, 0xdce0, 0x463c, 0x87, 0x08, 0x56, 0x6a, 0x90, 0xb2, 0x57, 0xc0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTypeReferencesFather link in the same Partition as the given ModelType
		/// </summary>
		/// <param name="source">ModelType to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public ModelTypeReferencesFather(ModelType source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTypeReferencesFather.SourceModelTypeDomainRoleId, source), new DslModeling::RoleAssignment(ModelTypeReferencesFather.TargetModelTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTypeReferencesFather(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTypeReferencesFather(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTypeReferencesFather(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTypeReferencesFather(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceModelType domain role code
		
		/// <summary>
		/// SourceModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceModelTypeDomainRoleId = new global::System.Guid(0x45edf2fd, 0x9d2a, 0x4bdf, 0xae, 0x82, 0xa0, 0x23, 0x71, 0x86, 0xdd, 0x9e);
		
		/// <summary>
		/// DomainRole SourceModelType
		/// Description for Ufba.ShHome.ModelTypeReferencesFather.SourceModelType
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesFather/SourceModelType.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesFather/SourceModelType.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Father", PropertyDisplayNameKey="Ufba.ShHome.ModelTypeReferencesFather/SourceModelType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("45edf2fd-9d2a-4bdf-ae82-a0237186dd9e")]
		public virtual ModelType SourceModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelHasFather of a ModelType
		/// <summary>
		/// Gets ModelHasFather.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelType GetModelHasFather(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetModelTypeDomainRoleId) as ModelType;
		}
		
		/// <summary>
		/// Sets ModelHasFather.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelHasFather(ModelType element, ModelType newSourceModelType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetModelTypeDomainRoleId, newSourceModelType);
		}
		#endregion
		#region TargetModelType domain role code
		
		/// <summary>
		/// TargetModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetModelTypeDomainRoleId = new global::System.Guid(0x6581e046, 0x5cb9, 0x4650, 0x92, 0x2e, 0xe4, 0x26, 0xbf, 0xfc, 0xcd, 0xe2);
		
		/// <summary>
		/// DomainRole TargetModelType
		/// Description for Ufba.ShHome.ModelTypeReferencesFather.TargetModelType
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesFather/TargetModelType.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesFather/TargetModelType.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelHasFather", PropertyDisplayNameKey="Ufba.ShHome.ModelTypeReferencesFather/TargetModelType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6581e046-5cb9-4650-922e-e426bffccde2")]
		public virtual ModelType TargetModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Father of a ModelType
		/// <summary>
		/// Gets Father.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelType GetFather(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceModelTypeDomainRoleId) as ModelType;
		}
		
		/// <summary>
		/// Sets Father.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFather(ModelType element, ModelType newTargetModelType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceModelTypeDomainRoleId, newTargetModelType);
		}
		#endregion
		#region SourceModelType link accessor
		/// <summary>
		/// Get the ModelTypeReferencesFather link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelTypeReferencesFather GetLinkToFather (global::Ufba.ShHome.ModelType sourceModelTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesFather> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesFather>(sourceModelTypeInstance, global::Ufba.ShHome.ModelTypeReferencesFather.SourceModelTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceModelType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetModelType link accessor
		/// <summary>
		/// Get the ModelTypeReferencesFather link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelTypeReferencesFather GetLinkToModelHasFather (global::Ufba.ShHome.ModelType targetModelTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesFather> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesFather>(targetModelTypeInstance, global::Ufba.ShHome.ModelTypeReferencesFather.TargetModelTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetModelType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTypeReferencesFather instance accessors
		
		/// <summary>
		/// Get any ModelTypeReferencesFather links between a given ModelType and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelTypeReferencesFather> GetLinks( global::Ufba.ShHome.ModelType source, global::Ufba.ShHome.ModelType target )
		{
			global::System.Collections.Generic.List<global::Ufba.ShHome.ModelTypeReferencesFather> outLinks = new global::System.Collections.Generic.List<global::Ufba.ShHome.ModelTypeReferencesFather>();
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesFather> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesFather>(source, global::Ufba.ShHome.ModelTypeReferencesFather.SourceModelTypeDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelTypeReferencesFather link in links )
			{
				if ( target.Equals(link.TargetModelType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTypeReferencesFather link between a given ModelTypeand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelTypeReferencesFather GetLink( global::Ufba.ShHome.ModelType source, global::Ufba.ShHome.ModelType target )
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesFather> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesFather>(source, global::Ufba.ShHome.ModelTypeReferencesFather.SourceModelTypeDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelTypeReferencesFather link in links )
			{
				if ( target.Equals(link.TargetModelType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainRelationship ModelTypeReferencesBrother
	/// Description for Ufba.ShHome.ModelTypeReferencesBrother
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesBrother.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesBrother.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a1c42c73-f069-4a01-a313-ada6c1159a78")]
	public partial class ModelTypeReferencesBrother : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTypeReferencesBrother domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa1c42c73, 0xf069, 0x4a01, 0xa3, 0x13, 0xad, 0xa6, 0xc1, 0x15, 0x9a, 0x78);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTypeReferencesBrother link in the same Partition as the given ModelType
		/// </summary>
		/// <param name="source">ModelType to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public ModelTypeReferencesBrother(ModelType source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTypeReferencesBrother.SourceModelTypeDomainRoleId, source), new DslModeling::RoleAssignment(ModelTypeReferencesBrother.TargetModelTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTypeReferencesBrother(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTypeReferencesBrother(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTypeReferencesBrother(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTypeReferencesBrother(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceModelType domain role code
		
		/// <summary>
		/// SourceModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceModelTypeDomainRoleId = new global::System.Guid(0x5ac554f0, 0xc99b, 0x418f, 0xb6, 0x4f, 0xb6, 0xbc, 0xc0, 0x1b, 0x5f, 0x6f);
		
		/// <summary>
		/// DomainRole SourceModelType
		/// Description for Ufba.ShHome.ModelTypeReferencesBrother.SourceModelType
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesBrother/SourceModelType.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesBrother/SourceModelType.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Brother", PropertyDisplayNameKey="Ufba.ShHome.ModelTypeReferencesBrother/SourceModelType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5ac554f0-c99b-418f-b64f-b6bcc01b5f6f")]
		public virtual ModelType SourceModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelHasBrother of a ModelType
		/// <summary>
		/// Gets ModelHasBrother.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelType GetModelHasBrother(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetModelTypeDomainRoleId) as ModelType;
		}
		
		/// <summary>
		/// Sets ModelHasBrother.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelHasBrother(ModelType element, ModelType newSourceModelType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetModelTypeDomainRoleId, newSourceModelType);
		}
		#endregion
		#region TargetModelType domain role code
		
		/// <summary>
		/// TargetModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetModelTypeDomainRoleId = new global::System.Guid(0x62cecac8, 0xf225, 0x4e57, 0x8c, 0xf6, 0x93, 0x73, 0xfc, 0x99, 0xb7, 0x95);
		
		/// <summary>
		/// DomainRole TargetModelType
		/// Description for Ufba.ShHome.ModelTypeReferencesBrother.TargetModelType
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesBrother/TargetModelType.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesBrother/TargetModelType.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelHasBrother", PropertyDisplayNameKey="Ufba.ShHome.ModelTypeReferencesBrother/TargetModelType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("62cecac8-f225-4e57-8cf6-9373fc99b795")]
		public virtual ModelType TargetModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Brother of a ModelType
		/// <summary>
		/// Gets Brother.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelType GetBrother(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceModelTypeDomainRoleId) as ModelType;
		}
		
		/// <summary>
		/// Sets Brother.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBrother(ModelType element, ModelType newTargetModelType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceModelTypeDomainRoleId, newTargetModelType);
		}
		#endregion
		#region SourceModelType link accessor
		/// <summary>
		/// Get the ModelTypeReferencesBrother link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelTypeReferencesBrother GetLinkToBrother (global::Ufba.ShHome.ModelType sourceModelTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesBrother> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesBrother>(sourceModelTypeInstance, global::Ufba.ShHome.ModelTypeReferencesBrother.SourceModelTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceModelType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetModelType link accessor
		/// <summary>
		/// Get the ModelTypeReferencesBrother link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelTypeReferencesBrother GetLinkToModelHasBrother (global::Ufba.ShHome.ModelType targetModelTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesBrother> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesBrother>(targetModelTypeInstance, global::Ufba.ShHome.ModelTypeReferencesBrother.TargetModelTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetModelType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTypeReferencesBrother instance accessors
		
		/// <summary>
		/// Get any ModelTypeReferencesBrother links between a given ModelType and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelTypeReferencesBrother> GetLinks( global::Ufba.ShHome.ModelType source, global::Ufba.ShHome.ModelType target )
		{
			global::System.Collections.Generic.List<global::Ufba.ShHome.ModelTypeReferencesBrother> outLinks = new global::System.Collections.Generic.List<global::Ufba.ShHome.ModelTypeReferencesBrother>();
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesBrother> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesBrother>(source, global::Ufba.ShHome.ModelTypeReferencesBrother.SourceModelTypeDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelTypeReferencesBrother link in links )
			{
				if ( target.Equals(link.TargetModelType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTypeReferencesBrother link between a given ModelTypeand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelTypeReferencesBrother GetLink( global::Ufba.ShHome.ModelType source, global::Ufba.ShHome.ModelType target )
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesBrother> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesBrother>(source, global::Ufba.ShHome.ModelTypeReferencesBrother.SourceModelTypeDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelTypeReferencesBrother link in links )
			{
				if ( target.Equals(link.TargetModelType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.ShHome
{
	/// <summary>
	/// DomainRelationship ModelTypeReferencesAlternatives
	/// Description for Ufba.ShHome.ModelTypeReferencesAlternatives
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesAlternatives.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesAlternatives.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.ShHome.ShHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d0277136-6278-43cc-9dc9-8acf4095609e")]
	public partial class ModelTypeReferencesAlternatives : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTypeReferencesAlternatives domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd0277136, 0x6278, 0x43cc, 0x9d, 0xc9, 0x8a, 0xcf, 0x40, 0x95, 0x60, 0x9e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTypeReferencesAlternatives link in the same Partition as the given ModelType
		/// </summary>
		/// <param name="source">ModelType to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public ModelTypeReferencesAlternatives(ModelType source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTypeReferencesAlternatives.SourceModelTypeDomainRoleId, source), new DslModeling::RoleAssignment(ModelTypeReferencesAlternatives.TargetModelTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTypeReferencesAlternatives(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTypeReferencesAlternatives(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTypeReferencesAlternatives(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTypeReferencesAlternatives(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceModelType domain role code
		
		/// <summary>
		/// SourceModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceModelTypeDomainRoleId = new global::System.Guid(0xdd9fe729, 0x5529, 0x4e8e, 0xbe, 0x7b, 0x70, 0x57, 0x96, 0xa8, 0xe4, 0xbd);
		
		/// <summary>
		/// DomainRole SourceModelType
		/// Description for Ufba.ShHome.ModelTypeReferencesAlternatives.SourceModelType
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesAlternatives/SourceModelType.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesAlternatives/SourceModelType.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Alternatives", PropertyDisplayNameKey="Ufba.ShHome.ModelTypeReferencesAlternatives/SourceModelType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dd9fe729-5529-4e8e-be7b-705796a8e4bd")]
		public virtual ModelType SourceModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelHasAlternatives of a ModelType
		/// <summary>
		/// Gets a list of ModelHasAlternatives.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetModelHasAlternatives(ModelType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, TargetModelTypeDomainRoleId);
		}
		#endregion
		#region TargetModelType domain role code
		
		/// <summary>
		/// TargetModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetModelTypeDomainRoleId = new global::System.Guid(0x82212c97, 0x18b4, 0x4818, 0x83, 0x1f, 0xfc, 0xc5, 0x48, 0x49, 0xb1, 0x3a);
		
		/// <summary>
		/// DomainRole TargetModelType
		/// Description for Ufba.ShHome.ModelTypeReferencesAlternatives.TargetModelType
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.ShHome.ModelTypeReferencesAlternatives/TargetModelType.DisplayName", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.ShHome.ModelTypeReferencesAlternatives/TargetModelType.Description", typeof(global::Ufba.ShHome.ShHomeDomainModel), "Ufba.ShHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelHasAlternatives", PropertyDisplayNameKey="Ufba.ShHome.ModelTypeReferencesAlternatives/TargetModelType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("82212c97-18b4-4818-831f-fcc54849b13a")]
		public virtual ModelType TargetModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Alternatives of a ModelType
		/// <summary>
		/// Gets a list of Alternatives.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetAlternatives(ModelType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, SourceModelTypeDomainRoleId);
		}
		#endregion
		#region SourceModelType link accessor
		/// <summary>
		/// Get the list of ModelTypeReferencesAlternatives links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelTypeReferencesAlternatives> GetLinksToAlternatives ( global::Ufba.ShHome.ModelType sourceModelTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesAlternatives>(sourceModelTypeInstance, global::Ufba.ShHome.ModelTypeReferencesAlternatives.SourceModelTypeDomainRoleId);
		}
		#endregion
		#region TargetModelType link accessor
		/// <summary>
		/// Get the list of ModelTypeReferencesAlternatives links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelTypeReferencesAlternatives> GetLinksToModelHasAlternatives ( global::Ufba.ShHome.ModelType targetModelTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesAlternatives>(targetModelTypeInstance, global::Ufba.ShHome.ModelTypeReferencesAlternatives.TargetModelTypeDomainRoleId);
		}
		#endregion
		#region ModelTypeReferencesAlternatives instance accessors
		
		/// <summary>
		/// Get any ModelTypeReferencesAlternatives links between a given ModelType and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.ShHome.ModelTypeReferencesAlternatives> GetLinks( global::Ufba.ShHome.ModelType source, global::Ufba.ShHome.ModelType target )
		{
			global::System.Collections.Generic.List<global::Ufba.ShHome.ModelTypeReferencesAlternatives> outLinks = new global::System.Collections.Generic.List<global::Ufba.ShHome.ModelTypeReferencesAlternatives>();
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesAlternatives> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesAlternatives>(source, global::Ufba.ShHome.ModelTypeReferencesAlternatives.SourceModelTypeDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelTypeReferencesAlternatives link in links )
			{
				if ( target.Equals(link.TargetModelType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTypeReferencesAlternatives link between a given ModelTypeand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.ShHome.ModelTypeReferencesAlternatives GetLink( global::Ufba.ShHome.ModelType source, global::Ufba.ShHome.ModelType target )
		{
			global::System.Collections.Generic.IList<global::Ufba.ShHome.ModelTypeReferencesAlternatives> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.ShHome.ModelTypeReferencesAlternatives>(source, global::Ufba.ShHome.ModelTypeReferencesAlternatives.SourceModelTypeDomainRoleId);
			foreach ( global::Ufba.ShHome.ModelTypeReferencesAlternatives link in links )
			{
				if ( target.Equals(link.TargetModelType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
